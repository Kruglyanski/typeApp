{"version":3,"sources":["components/Textarea/Textarea.module.css","api/api.ts","store/textareaReducer.ts","store/appReducer.tsx","utils/langUtil.ts","components/Textarea/Textarea.tsx","components/Statistics/Statistics.tsx","components/Alert/Alert.tsx","components/Dropdown/Dropdown.tsx","components/Modal/Modal.tsx","components/Modal/ModalContainer.tsx","App.tsx","reportWebVitals.ts","store/rootReducer.ts","index.tsx"],"names":["module","exports","textApiEng","a","axios","get","then","response","data","textApiRus","console","log","slice","loadText","createAsyncThunk","lang","split","map","symbol","index","id","value","isActive","isWrong","textareaReducer","createSlice","name","initialState","symbols","fontSize","counter","totalCount","time","speed","accuracy","language","isStarted","reducers","setIsStarted","state","action","payload","setState","isFetched","nullifyState","setLanguage","setTime","setCounter","setTotalCount","setSpeed","setAccuracy","incFont","decFont","extraReducers","builder","addCase","fulfilled","actions","appReducer","alertIsShow","modalIsShow","isLightTheme","isDone","setIsDone","setModalShow","setAlertShow","setLightTheme","rusLower","rusUpper","toUpperCase","enLower","enUpper","rus","en","langCheck","e","char","String","fromCharCode","keyCode","charCode","getChar","includes","Textarea","text","useSelector","textarea","dispatch","useDispatch","app","useEffect","interval","setInterval","clearInterval","keydownHandler","useCallback","event","currentSymbol","find","i","key","length","document","addEventListener","removeEventListener","themeStyles","cls","lightTextarea","darkTextarea","className","wrapper","style","symbolGreen","symbolRed","Statistics","fontHandler","currentTarget","bold","toFixed","button","onClick","onKeyUp","preventDefault","data-toggle","disabled","AppAlert","Alert","variant","onClose","dismissible","Heading","MyDropdown","dropdownHandler","Dropdown","Toggle","Menu","Item","CenteredModal","title","buttonText","buttonDisabled","onClickHandler","isDropDown","Modal","onHide","show","size","aria-labelledby","centered","Body","Footer","Button","ModalContainer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e191cc16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Textarea_wrapper__34dSN\",\"bold\":\"Textarea_bold__3KDYN\",\"button\":\"Textarea_button__1BJdc\",\"darkTextarea\":\"Textarea_darkTextarea__2uSxQ\",\"lightTextarea\":\"Textarea_lightTextarea__bHJaV\",\"symbolGreen\":\"Textarea_symbolGreen__Sd1cR\",\"symbolRed\":\"Textarea_symbolRed__3JeOV\"};","import axios from 'axios'\r\n\r\n\r\nexport const textApiEng = async () =>{\r\n    const data = await axios.get('https://baconipsum.com/api/?type=meat-and-filler&paras=5&format=text').then(\r\n        response => response.data\r\n    )\r\n    return data\r\n}\r\nexport const textApiRus = async () =>{\r\n    const data = await axios.get('https://fish-text.ru/get?format=html&number=5').then(\r\n        response => response.data\r\n    )\r\n\r\n    console.log('data', data)\r\n    return data.slice(3, -4)\r\n}\r\n","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {textApiEng, textApiRus} from '../api/api'\r\n\r\n\r\nexport type SymbolsArrayType = {\r\n    id: number\r\n    value: string | null\r\n    isActive: boolean\r\n    isWrong: boolean\r\n}\r\nexport type TextareaReducerType = {\r\n    symbols: Array<SymbolsArrayType>\r\n    counter: number\r\n    totalCount: number\r\n    time: number\r\n    fontSize: number\r\n    speed: number\r\n    accuracy: number\r\n    language: string | null\r\n    isStarted: boolean\r\n}\r\n\r\nconst initialState = {\r\n    symbols: [{\r\n        id: 0,\r\n        value: null,\r\n        isActive: false,\r\n        isWrong: false\r\n    }],\r\n    fontSize: 14,\r\n    counter: 0,\r\n    totalCount: 0,\r\n    time: 0,\r\n    speed: 0,\r\n    accuracy: 100,\r\n    language: null,\r\n    isStarted: false\r\n\r\n} as TextareaReducerType\r\n\r\nexport const loadText = createAsyncThunk(\r\n    'authReducer/setAuth',\r\n    async (lang: string | null) => {\r\n        let data = ''\r\n         switch (lang) {\r\n            case 'English':\r\n                data = await textApiEng()\r\n                break\r\n             case 'Русский':\r\n                data = await textApiRus()\r\n                break\r\n            default:\r\n                break\r\n        }\r\n\r\n        return data.split('').map((symbol: string, index: number) => {\r\n            if (index === 0) {\r\n                return (\r\n                    {id: index, value: symbol, isActive: true, isWrong: false}\r\n                )\r\n\r\n            }\r\n            return (\r\n                {id: index, value: symbol, isActive: false, isWrong: false}\r\n            )\r\n        })\r\n\r\n    }\r\n)\r\n\r\nconst textareaReducer = createSlice({\r\n    name: 'textareaReducer',\r\n    initialState,\r\n    reducers: {\r\n        setIsStarted: (state, action) => {\r\n            return {\r\n                ...state,\r\n                isStarted: action.payload\r\n            }\r\n        },\r\n        setState: (state, action) => {\r\n            return {\r\n                ...state,\r\n                symbols: action.payload,\r\n                isFetched: true\r\n            }\r\n        },\r\n        nullifyState: (state) => {\r\n            return {\r\n                ...state,\r\n                isFetched: false,\r\n                counter: 0,\r\n                totalCount: 0,\r\n                time: 0,\r\n                speed: 0,\r\n                accuracy: 100\r\n            }\r\n        },\r\n        setLanguage: (state, action) => {\r\n            return {\r\n                ...state,\r\n                language: action.payload,\r\n            }\r\n        },\r\n        setTime: (state) => {\r\n            return {\r\n                ...state,\r\n                time: state.time + 1,\r\n            }\r\n        },\r\n\r\n        setCounter: (state => {\r\n            return {\r\n                ...state,\r\n                counter: state.counter + 1\r\n            }\r\n        }),\r\n        setTotalCount: (state => {\r\n            return {\r\n                ...state,\r\n                totalCount: state.totalCount + 1\r\n            }\r\n        }),\r\n        setSpeed: ((state) => {\r\n            return {\r\n                ...state,\r\n                speed: (state.counter / state.time * 60)\r\n            }\r\n        }),\r\n        setAccuracy: ((state) => {\r\n            return {\r\n                ...state,\r\n                accuracy:  (state.counter  / state.totalCount) * 100\r\n            }\r\n        }),\r\n\r\n        incFont: (state) => {\r\n            return {\r\n                ...state,\r\n                fontSize: state.fontSize + 1\r\n            }\r\n        },\r\n\r\n        decFont: (state) => {\r\n            return {\r\n                ...state,\r\n                fontSize: state.fontSize - 1\r\n            }\r\n        }\r\n    },\r\n\r\n    extraReducers: builder => {\r\n        builder.addCase(loadText.fulfilled, (state, action) => {\r\n            return {\r\n                ...state,\r\n                symbols: action.payload\r\n            }\r\n\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setIsStarted, setState, setTime, nullifyState, setLanguage, incFont, decFont, setCounter, setTotalCount, setSpeed, setAccuracy} = textareaReducer.actions\r\n\r\nexport default textareaReducer.reducer","import {createSlice} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    alertIsShow: false,\r\n    modalIsShow: true,\r\n    isLightTheme: true,\r\n    isDone: false\r\n}\r\n\r\nconst appReducer = createSlice({\r\n    name: 'appReducer',\r\n    initialState,\r\n    reducers: {\r\n        setIsDone: (state, action) => {\r\n            return {\r\n                ...state,\r\n                isDone: action.payload\r\n            }\r\n        },\r\n\r\n        setModalShow: (state) => {\r\n            return {\r\n                ...state,\r\n                modalIsShow: !state.modalIsShow\r\n            }\r\n        },\r\n\r\n        setAlertShow: (state, action) => {\r\n            return {\r\n                ...state,\r\n                alertIsShow: action.payload\r\n            }\r\n        },\r\n\r\n        setLightTheme: (state) => {\r\n            return {\r\n                ...state,\r\n                isLightTheme: !state.isLightTheme\r\n            }\r\n        }\r\n    },\r\n    extraReducers: {}\r\n})\r\n\r\nexport const {setAlertShow, setModalShow, setLightTheme, setIsDone} = appReducer.actions\r\n\r\nexport default appReducer.reducer","import React from 'react'\r\n\r\nconst rusLower = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'\r\nconst rusUpper = rusLower.toUpperCase()\r\nconst enLower = 'abcdefghijklmnopqrstuvwxyz'\r\nconst enUpper = enLower.toUpperCase()\r\nconst rus = rusLower + rusUpper\r\nconst en = enLower + enUpper\r\n\r\nconst getChar = (e: any) => String.fromCharCode(e.keyCode || e.charCode)\r\n\r\nexport const langCheck = (language: string | null, e: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement>) => {\r\n    const char = getChar(e)\r\n    return ((rus.includes(char) && language==='English') || (en.includes(char)&& language==='Русский'))\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport cls from './Textarea.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    loadText,\r\n    setAccuracy,\r\n    setCounter,\r\n    setIsStarted,\r\n    setSpeed,\r\n    setState,\r\n    setTime,\r\n    setTotalCount\r\n} from '../../store/textareaReducer'\r\nimport {setAlertShow, setIsDone, setModalShow} from '../../store/appReducer'\r\nimport {langCheck} from '../../utils/langUtil'\r\nimport {RootState} from '../../store/rootReducer'\r\n\r\n\r\nexport const Textarea: React.FC = () => {\r\n\r\n    const text = useSelector((state: RootState) => state.textarea)\r\n    const dispatch = useDispatch()\r\n    const isLightTheme = useSelector((state: RootState) => state.app.isLightTheme)\r\n    const isDone = useSelector((state: RootState) => state.app.isDone)\r\n\r\n    useEffect(() => {\r\n        if (text.isStarted) {\r\n            const interval = setInterval(() => {\r\n                dispatch(setTime())\r\n                dispatch(setSpeed())\r\n            }, 1000)\r\n            if (isDone) {\r\n                clearInterval(interval)\r\n            }\r\n            return function cleanup() {\r\n                clearInterval(interval)\r\n            }\r\n        }\r\n\r\n    }, [text.isStarted, isDone, dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(loadText(text.language))\r\n\r\n    }, [dispatch])\r\n\r\n    const keydownHandler = useCallback((event) => {\r\n        dispatch(setIsStarted(true))\r\n        dispatch(setTotalCount())\r\n        const currentSymbol = text.symbols.find((i) => i.isActive)\r\n\r\n        if (langCheck(text.language, event)) {\r\n            dispatch(setAlertShow(true))\r\n        } else {\r\n            dispatch(setAlertShow(false))\r\n        }\r\n        if (currentSymbol && (event.key === currentSymbol.value)) {\r\n\r\n            const payload = text.symbols.map((i) => {\r\n                if (currentSymbol && (i.id === currentSymbol.id + 1) ) {\r\n                    dispatch(setCounter())\r\n\r\n                    return {...i, isActive: true}\r\n                }\r\n                return {...i, isActive: false, isWrong: false}\r\n            })\r\n            dispatch(setState(payload))\r\n\r\n        } else {\r\n            const payload = text.symbols.map((i) => {\r\n\r\n                if (currentSymbol && i.id === currentSymbol.id) {\r\n                    return {...i, isActive: true, isWrong: true}\r\n                }\r\n                return {...i, isActive: false, isWrong: false}\r\n            })\r\n            dispatch(setState(payload))\r\n        }\r\n\r\n        dispatch(setAccuracy())\r\n\r\n        if (text.symbols.length  === text.counter + 1) {\r\n            dispatch(setIsDone(true))\r\n            dispatch(setModalShow())\r\n        }\r\n    }, [text, dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keypress', keydownHandler, false)\r\n\r\n        return () => {\r\n            document.removeEventListener('keypress', keydownHandler, false)\r\n        }\r\n    }, [keydownHandler])\r\n\r\n    const themeStyles = isLightTheme\r\n        ?\r\n        ('border w-75 p-3 rounded float-left ' + cls.lightTextarea)\r\n        :\r\n        ('border w-75 p-3 rounded float-left ' + cls.darkTextarea)\r\n\r\n    return (\r\n        <div>\r\n            <div className={themeStyles + ' ' + cls.wrapper} style={{fontSize: text.fontSize + 'px'}}>\r\n                {text.symbols.map((i) => {\r\n                    if (i.isActive && !i.isWrong) {\r\n                        return <span key={i.id} className={cls.symbolGreen}>{i.value}</span>\r\n                    }\r\n                    if (i.isActive && i.isWrong) {\r\n                        return <span key={i.id} className={cls.symbolRed}>{i.value}</span>\r\n                    }\r\n                    return (\r\n                        <span key={i.id}>{i.value}</span>\r\n                    )\r\n                })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport cls from '../Textarea/Textarea.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {decFont, incFont, loadText, nullifyState, setIsStarted, setLanguage} from '../../store/textareaReducer'\r\nimport { setLightTheme, setModalShow} from '../../store/appReducer'\r\nimport {setAlertShow} from '../../store/appReducer'\r\nimport {RootState} from '../../store/rootReducer'\r\n\r\n\r\nexport const Statistics: React.FC = () => {\r\n\r\n    const text = useSelector((state:RootState) => state.textarea)\r\n    const isLightTheme = useSelector((state:RootState) => state.app.isLightTheme)\r\n\r\n    const dispatch = useDispatch()\r\n    const btnHandler = () => {\r\n        dispatch(setAlertShow(false))\r\n        dispatch(setIsStarted(false))\r\n        dispatch(setModalShow())\r\n        dispatch(setLanguage(null))\r\n        dispatch(nullifyState())\r\n        dispatch(loadText(text.language))\r\n    }\r\n\r\n    const themeHandler = () => {\r\n        dispatch(setLightTheme())\r\n    }\r\n\r\n    const fontHandler = (e: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement>) =>{\r\n        if(e.currentTarget.id === '1'){\r\n            dispatch(decFont())\r\n        }\r\n        if(e.currentTarget.id === '2'){\r\n            dispatch(incFont())\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <span>Скорость: <br/><b className={cls.bold}>{text.speed.toFixed(1)}</b> зн/мин</span><br/>\r\n            <span>Точность: <br/><b className={cls.bold}>{text.accuracy.toFixed(1)}</b>%</span><br/>\r\n            <br/>\r\n            <button className={'btn btn-warning btn-sm mt-1 ' + cls.button} onClick={btnHandler}\r\n                    onKeyUp={event => event.preventDefault()}>Начать сначала\r\n            </button>\r\n            <br/>\r\n            <br/>\r\n            <button className={'btn btn-secondary btn-sm mt-1 ' + cls.button} onClick={themeHandler}\r\n                    onKeyUp={event => event.preventDefault()}>{isLightTheme ? 'Тёмная тема' : 'Светлая тема'}\r\n            </button>\r\n            <br/>\r\n            <br/>\r\n            Шрифт: &nbsp;\r\n            <div className=\"btn-group btn-group-toggle\"  data-toggle=\"buttons\">\r\n                <button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={fontHandler}\r\n                    disabled={text.fontSize <= 10}\r\n                    id=\"1\"\r\n                >\r\n                    <b>-</b>\r\n                </button>\r\n                <button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={fontHandler}\r\n                    disabled={text.fontSize >= 26}\r\n                    id=\"2\" >\r\n                    <b>+</b>\r\n                </button>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}","import {Alert} from 'react-bootstrap'\r\nimport {useDispatch} from 'react-redux'\r\nimport {setAlertShow} from '../../store/appReducer'\r\nimport React from 'react'\r\n\r\nexport const AppAlert = () => {\r\n    const dispatch = useDispatch()\r\n    return (\r\n        <Alert variant=\"warning\" onClose={() => dispatch(setAlertShow(false))} dismissible>\r\n            <Alert.Heading>Переключите раскладку клавиатуры!</Alert.Heading>\r\n        </Alert>\r\n    )\r\n\r\n}","import React from 'react'\r\nimport {Dropdown} from 'react-bootstrap'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { RootState } from '../../store/rootReducer'\r\nimport {loadText, setLanguage} from '../../store/textareaReducer'\r\n\r\nexport const MyDropdown = () => {\r\n    const dispatch = useDispatch()\r\n    const language = useSelector((state: RootState )=> state.textarea.language)\r\n    const dropdownHandler = (e: React.MouseEvent<HTMLDivElement | HTMLAnchorElement>) => {\r\n\r\n        if (e.currentTarget.id === '1') {\r\n            dispatch(setLanguage('Русский'))\r\n            dispatch(loadText('Русский'))\r\n        }\r\n        if (e.currentTarget.id  === '2') {\r\n            dispatch(setLanguage('English'))\r\n            dispatch(loadText('English'))\r\n        }\r\n        else return\r\n    }\r\n    return (\r\n        <Dropdown>\r\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                {language ? language : 'Язык'}\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu >\r\n                <Dropdown.Item onClick={dropdownHandler} id='1'>Русский</Dropdown.Item>\r\n                <Dropdown.Item onClick={dropdownHandler} id='2'>English</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n}","import {Button, Modal} from 'react-bootstrap'\r\nimport React, {useEffect} from 'react'\r\nimport {MyDropdown} from '../Dropdown/Dropdown'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { setModalShow } from '../../store/appReducer'\r\nimport {RootState} from '../../store/rootReducer'\r\n\r\nexport type PropTypes = {\r\n    title: string\r\n    buttonText: string\r\n    buttonDisabled: boolean\r\n    onClickHandler: () => void\r\n    isDropDown: boolean\r\n}\r\n\r\nexport const CenteredModal: React.FC<PropTypes> = ({title, buttonText, buttonDisabled, onClickHandler , isDropDown}) =>{\r\n\r\n    const modalIsShow = useSelector((state: RootState)  => state.app.modalIsShow)\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <Modal\r\n            onHide ={() => dispatch(setModalShow())}\r\n            show={modalIsShow}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n\r\n            <Modal.Body>\r\n                <h4>{title}</h4>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button disabled = {buttonDisabled} onClick={onClickHandler}>{buttonText}</Button>\r\n                {isDropDown &&<MyDropdown/>}\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport {CenteredModal} from './Modal'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {setAlertShow, setIsDone, setModalShow} from '../../store/appReducer'\r\nimport {loadText, nullifyState, setIsStarted, setLanguage} from '../../store/textareaReducer'\r\nimport {RootState} from '../../store/rootReducer'\r\n\r\nexport const ModalContainer = () => {\r\n    const language = useSelector((state: RootState) => state.textarea.language)\r\n    const isDone = useSelector((state: RootState) => state.app.isDone)\r\n    const speed = useSelector((state: RootState) => state.textarea.speed)\r\n    const accuracy = useSelector((state: RootState) => state.textarea.accuracy)\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(setAlertShow(false))\r\n        dispatch(setIsStarted(false))\r\n        dispatch(setModalShow())\r\n        dispatch(setLanguage(null))\r\n        dispatch(nullifyState())\r\n        dispatch(loadText(language))\r\n        dispatch(setModalShow())\r\n        dispatch(setIsDone(false))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isDone\r\n                    ?\r\n                    <CenteredModal\r\n                        title={`Тест окончен! Ваша скорость: ${speed.toFixed(1)} зн/мин. Точность: ${accuracy.toFixed(1)}%`}\r\n                        buttonText={'Начать заново'}\r\n                        buttonDisabled={false}\r\n                        onClickHandler={onClickHandler}\r\n                        isDropDown={false}\r\n                    />\r\n                    :\r\n                    <CenteredModal\r\n                        title={'Выберите язык текста и нажмите \"Начать\".'}\r\n                        buttonText={'Начать'}\r\n                        buttonDisabled={!language}\r\n                        onClickHandler={() => dispatch(setModalShow())}\r\n                        isDropDown={true}/>\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react'\nimport './App.css'\nimport {Textarea} from './components/Textarea/Textarea'\nimport {Statistics} from './components/Statistics/Statistics'\nimport {AppAlert} from './components/Alert/Alert'\nimport {useSelector} from 'react-redux'\nimport {ModalContainer} from './components/Modal/ModalContainer'\nimport {RootState} from './store/rootReducer'\n\n\nfunction App() {\n    const alertIsShow = useSelector((state:RootState) => state.app.alertIsShow)\n    const isLightTheme = useSelector((state:RootState) => state.app.isLightTheme)\n    const themeStyles = isLightTheme ? 'p-3 mb-2 bg-primary text-white' : 'p-3 mb-2 bg-dark text-light'\n    return (\n        <div className={'App ' + themeStyles}>\n            {alertIsShow && <AppAlert/>}\n            <Textarea/>\n            <Statistics/>\n            <ModalContainer/>\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {configureStore, combineReducers} from '@reduxjs/toolkit'\r\nimport textareaReducer from './textareaReducer'\r\nimport appReducer from './appReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    textarea: textareaReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer\r\n\r\n})\r\n\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport {Provider} from 'react-redux'\nimport {store} from '../src/store/rootReducer'\n\nReactDOM.render(\n    <Provider store={store}>\n            <App />\n    </Provider>\n ,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}